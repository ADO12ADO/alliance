syntax = "proto3";
package alliance.alliance;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "alliance/alliance.proto";

option go_package = "alliance/x/alliance/types";

service Msg {
  rpc Delegate(MsgDelegate) returns (MsgDelegateResponse);
  rpc Redelegate(MsgRedelegate) returns(MsgRedelegateResponse);
  rpc Undelegate(MsgUndelegate) returns(MsgUndelegateResponse);
  
  rpc CreateAlliance(MsgCreateAlliance) returns (MsgCreateAllianceResponse);
  rpc UpdateAlliance(MsgUpdateAlliance) returns (MsgUpdateAllianceResponse);
  rpc DeleteAlliance(MsgDeleteAlliance) returns (MsgDeleteAllianceResponse);
}

message MsgDelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}
message MsgDelegateResponse {}

message MsgUndelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}

message MsgUndelegateResponse {}

message MsgRedelegate {
  option (cosmos.msg.v1.signer) = "delegator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_src_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   validator_dst_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount            = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}

message MsgRedelegateResponse {}


message MsgCreateAlliance {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // plan is the upgrade plan.
  AllianceAsset alliance = 2 [(gogoproto.nullable) = false];
}

message MsgCreateAllianceResponse {}

message MsgUpdateAlliance {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Denom of the asset. It could either be a native token or an IBC token
  string denom      = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  
  // The reward weight specifies the ratio of rewards that will be given to each alliance asset
  // It does not need to sum to 1. rate = weight / total_weight
  // Native asset is always assumed to have a weight of 1.
  string reward_weight = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

message MsgUpdateAllianceResponse {}

message MsgDeleteAlliance {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  string denom = 2;
}

message MsgDeleteAllianceResponse {}